pipeline {
  agent any
  parameters {
        string(name: 'name_container', defaultValue: 'proyecto-qa', description: 'nombre del docker')
        string(name: 'name_imagen', defaultValue: 'iproyecto-qa', description: 'nombre de la imagen')
        string(name: 'tag_imagen', defaultValue: 'latest', description: 'etiqueta de la imagen')
        string(name: 'puerto_imagen', defaultValue: '81', description: 'puerto a publicar')
   }
   environment {
        name_final = '%name_container%%tag_imagen%%puerto_imagen%'
   }
   stages {
        stage('init'){
          steps{
            script{
                bat "echo %name_final%"
             }
          }
          
       }
        stage('stop/rm') {
            
            when {
                expression { 
                    DOCKER_EXIST = bat(returnStdout: true, script: 'echo "$(docker ps -q --filter name=${name_final})"').trim()
                    return  DOCKER_EXIST != '' 
                }
            }
            steps {
                script{
                    bat ''' 
                         docker stop ${name_final}
                    '''
                    }
                    
                }                    
                                  
            }
           
        stage('build') {
            steps {
                script{
                    bat ''' 
                    docker build    jobs/dockerweb/ -t ${params.name_imagen}:${params.tag_imagen}
                    '''
                    }
                    
                }                    
                                  
            }
            stage('run') {
            steps {
                script{
                    bat ''' 
                        docker run -dp ${params.puerto_imagen}:80 --name ${params.name_final} ${params.name_imagen}:${params.tag_imagen}
 
                    '''
                    }
                    
                }                    
                                  
            }
            
          
        }   
    }
